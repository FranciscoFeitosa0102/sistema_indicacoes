{
  "name": "DisparoPTCClienteBase",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const data = new Date();\n\n// Ajuste para horário de Brasília (UTC-3)\nconst horaUTC = data.getUTCHours();\nconst hora = (horaUTC - 3 + 24) % 24; // garante que fique entre 0 e 23\n\nlet saudacao = (hora >= 5 && hora < 12)\n  ? \"Bom dia\"\n  : (hora >= 12 && hora < 18)\n  ? \"Boa tarde\"\n  : \"Boa noite\";\n\nconst mensagens = [\n  `${saudacao}! Você ou alguém da família está precisando de atendimento médico com valor acessível? 🩺  \nAqui na AmorSaúde Patrocínio temos várias especialidades com preço reduzido!  \n👉 Toque em **ESPECIALIDADES** e veja como podemos te ajudar.`,\n\n  `${saudacao}! Já imaginou marcar uma consulta médica hoje mesmo, com preço que cabe no bolso? 💚  \nA AmorSaúde Patrocínio tá com várias especialidades disponíveis!  \nQual especialidade você tá precisando agora?  \n👉 Toque em **ESPECIALIDADES** pra ver as opções.`,\n\n  `${saudacao} 😊 Tem alguém aí precisando de uma consulta médica?  \nNa clínica AmorSaúde em Patrocínio temos atendimentos acessíveis em várias áreas.  \n👉 Já deu uma olhada nas especialidades disponíveis? Toque em **ESPECIALIDADES**!`,\n\n  `${saudacao}! Qual especialidade médica você ou alguém da sua família tá precisando hoje? 🩺  \nNa AmorSaúde Patrocínio temos opções com valores que cabem no bolso.  \n👉 Toque em **ESPECIALIDADES** e confira.`,\n\n  `${saudacao}! Você sabia que a clínica AmorSaúde Patrocínio oferece consultas acessíveis em várias especialidades?  \nQuem aí da família tá precisando de atendimento?  \n👉 Descubra agora clicando em **ESPECIALIDADES**!`,\n\n  `${saudacao}! Tá difícil encontrar uma consulta com valor acessível?  \nNa AmorSaúde Patrocínio temos várias opções esperando por você!  \n👉 Em qual especialidade você gostaria de agendar? Clique em **ESPECIALIDADES**.`,\n\n  `${saudacao}! 😄 Já conferiu as especialidades da AmorSaúde Patrocínio?  \nTem alguma consulta que você ou alguém da família tá precisando?  \n👉 Toque em **ESPECIALIDADES** e veja como podemos ajudar.`\n];\n\nconst mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];\n\nreturn [{ json: { ...items[0].json, mensagem: mensagemAleatoria } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        -60
      ],
      "id": "d44a9508-17f3-4704-93c9-7af7d02d72c2",
      "name": "Code19"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Primeiro2').item.json.Minute }}",
                    "rightValue": "28",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8e19f18f-f773-469a-98af-73cffc2bb769"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dia"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "63823180-17d8-425c-8cd6-b97527b2b94f",
                    "leftValue": "={{ $('Primeiro2').item.json.Minute }}",
                    "rightValue": "53",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Tarde"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ad7ca10b-6f39-487c-818a-5b5949127540",
                    "leftValue": "={{ $('Primeiro2').item.json.Hour }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Noite"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -160,
        740
      ],
      "id": "4f01648e-824c-483f-be4b-065ddb127bf1",
      "name": "Switch6"
    },
    {
      "parameters": {
        "jsCode": "const data = new Date();\nconst hora = data.getHours();\n\nlet saudacao = hora >= 5 && hora < 12 ? \"Bom dia\" : hora >= 12 && hora < 18 ? \"Boa tarde\" : \"Boa noite\";\n\nconst mensagens = [\n  `${saudacao}! Sou eu de novo! Não quero ser invasivo, mas meu trabalho é apresentar os benefícios do Cartão de TODOS para mais pessoas. Acredito que ele pode ser útil para você. Posso te explicar rapidinho como funciona?`,\n  `${saudacao}! Passando aqui mais uma vez! Quero te mostrar como você pode marcar consultas médicas por apenas R$40,00. Quer saber como?`,\n  `${saudacao}! Desculpa insistir, mas preciso te explicar rapidinho sobre o Cartão de TODOS. Tenho certeza de que pode ser algo vantajoso para você e sua família. Podemos conversar?`,\n  `${saudacao}! Sei que sua rotina é corrida, mas prometo ser breve. Quero te mostrar como você pode economizar em consultas e exames médicos. Posso te explicar?`,\n  `${saudacao}! Voltei para te contar como o Cartão de TODOS pode te ajudar a cuidar da saúde gastando pouco. Consegue me dar um minutinho?`,\n  `${saudacao}! Não quero incomodar, mas preciso te explicar um pouco mais sobre meu trabalho. O Cartão de TODOS pode fazer diferença para você e sua família. Me dá uma chance?`,\n  `${saudacao}! Sei que talvez você esteja ocupado, mas queria só um momento para te mostrar uma solução incrível para reduzir seus gastos com saúde. Podemos conversar?`,\n  `${saudacao}! Voltei para falar com você. Quero te explicar como é possível ter acesso a consultas médicas acessíveis sempre que precisar. Pode me dar um tempinho?`,\n  `${saudacao}! Passando aqui mais uma vez para te contar como o Cartão de TODOS pode facilitar seu acesso a saúde de qualidade. Podemos conversar agora?`,\n  `${saudacao}! Eu realmente acredito que o Cartão de TODOS pode te ajudar. Por isso, queria insistir só um pouquinho para te explicar como funciona. Posso falar com você?`,\n  `${saudacao}! Sei que pode não ser o melhor momento, mas quero muito te mostrar como o Cartão de TODOS pode ser útil para você. Posso te explicar rapidamente?`,\n  `${saudacao}! Quero te ajudar a cuidar da sua saúde sem pesar no bolso. O Cartão de TODOS é uma ótima solução para isso. Tem um minutinho para ouvir como funciona?`,\n  `${saudacao}! Sei que pode estar ocupado, mas queria te explicar um pouco sobre o Cartão de TODOS. Ele pode fazer sentido para você! Podemos conversar rapidinho?`,\n  `${saudacao}! Voltei porque realmente acredito que o Cartão de TODOS pode ser útil para você. Se puder, me dá um tempinho para te explicar como ele funciona?`,\n  `${saudacao}! Meu trabalho depende de apresentar os benefícios do Cartão de TODOS para mais pessoas, e acho que pode ser interessante para você. Consegue falar um minutinho?`,\n  `${saudacao}! Estou aqui novamente porque quero garantir que você conheça todos os benefícios do Cartão de TODOS. Pode me dar alguns minutos para te explicar?`\n];\n\nconst mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];\n\nreturn [{ json: { ...items[0].json, mensagem: mensagemAleatoria } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        660
      ],
      "id": "8a51ee6f-f567-4f77-876a-1f7c78a94e63",
      "name": "Code20"
    },
    {
      "parameters": {
        "jsCode": "const data = new Date();\nconst hora = data.getHours();\n\nlet saudacao = hora >= 5 && hora < 12 ? \"Bom dia\" : hora >= 12 && hora < 18 ? \"Boa tarde\" : \"Boa noite\";\n\nconst mensagens = [\n  \"Oi! Ainda estou por aqui porque acredito que minha solução pode realmente fazer diferença para você. Posso te explicar rapidinho?\",\n  \"Passei o dia pensando em como posso te ajudar. Que tal me dar 5 minutos para te contar algo que pode melhorar sua vida?\",\n  \"Oi! Prometo ser breve! Posso te mostrar como meu produto pode facilitar o seu dia a dia?\",\n  \"Ainda estou por aqui porque sei que essa oportunidade pode ser valiosa para você. Posso te contar mais?\",\n  \"Oi! Sei que sua rotina é corrida, mas só preciso de um tempinho para te apresentar algo que pode fazer a diferença. Podemos conversar?\",\n  \"Não quero te incomodar, mas acredito que você pode se beneficiar muito com o que tenho a dizer. Me dá 2 minutinhos?\",\n  \"Percebi que não conseguimos falar ainda. Tudo bem, mas saiba que estarei por aqui sempre que precisar.\",\n  \"Oi! Se ainda estiver na dúvida, me dá a chance de te mostrar como isso pode ser útil para você. Que tal uma conversa rápida?\",\n  \"Ei! Sei que pode parecer insistência, mas é só porque acredito de verdade que isso pode te ajudar. Posso te mostrar como?\",\n  \"Oi! Antes de eu ir embora, queria saber se posso te explicar rapidinho como isso pode fazer a diferença na sua vida.\",\n  \"Ainda estou aqui porque realmente acredito que posso te ajudar. Só preciso de um tempinho seu. Podemos falar?\",\n  \"Quero me despedir, mas antes, se ainda houver uma chance, posso te mostrar algo que pode ser útil para você?\",\n  \"Oi! Eu entendo que pode não ser o momento certo, mas se mudar de ideia, saiba que estou por aqui para te ajudar.\",\n  \"Oi! Prometo que essa é minha última tentativa por hoje. Que tal me dar 3 minutos para te explicar algo que pode valer a pena?\",\n  \"Oi, percebi que ainda não conseguimos conversar. Vou respeitar isso, mas se precisar, é só me chamar.\"\n];\n\nconst mensagemAleatoria = mensagens[Math.floor(Math.random() * mensagens.length)];\n\nreturn [{ json: { ...items[0].json, mensagem: mensagemAleatoria } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        820
      ],
      "id": "9d205bd5-2ac3-4589-8884-1ae00212e275",
      "name": "Code21"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -80,
        -100
      ],
      "id": "13f03e60-6097-45c2-bfe0-9758650a4cc6",
      "name": "Loop Over Items6"
    },
    {
      "parameters": {
        "amount": "={{ $json.waitTime }}\n\n"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1240,
        20
      ],
      "id": "bda27359-8649-42ec-abea-b232703044a8",
      "name": "Wait",
      "webhookId": "3bcdde97-b20f-445b-a7d1-1fdf36382578"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n    item.json.waitTime = Math.floor(Math.random() * (30 - 10 + 1)) + 10;\n    return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -140
      ],
      "id": "8a727630-7699-4286-b4e8-aa8008aa8557",
      "name": "Code"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "25 7 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1220,
        80
      ],
      "id": "aa822685-d299-4d00-ac65-fa5957624d60",
      "name": "Primeiro2"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "vendedoresPatrocinio",
          "mode": "list",
          "cachedResultName": "vendedoresPatrocinio"
        },
        "limit": 15000,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1040,
        80
      ],
      "id": "482ba328-c850-4ef3-a58f-2e0f9a5d78a2",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "0MKV1xl5BucK90QG",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5abbd321-0c08-4d4a-8c9a-fd207b54fbc2",
              "leftValue": "={{ $json.vendedor }}",
              "rightValue": "=base",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        60
      ],
      "id": "80b84171-cc68-4682-8755-fa13d92544ef",
      "name": "Se é o vendendor"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "90f42328-b6d9-47bd-b4fc-fa4dc0228af1",
              "leftValue": "={{ $json.respodeu }}",
              "rightValue": "Sim",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -280,
        -140
      ],
      "id": "f9f946e0-0aa9-4cb4-9dcc-4c4de59ad660",
      "name": "Respondeu"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c951cd27-10e5-41f8-9140-d181b2aa89ba",
              "leftValue": "={{ $json.data_formatada }}",
              "rightValue": "={{ new Date().toISOString().split('T')[0] }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -660,
        80
      ],
      "id": "8dca2a96-693f-4df8-9be0-1a2743eef8c4",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Pega todos os itens de entrada\nconst items = $input.all();\n\n// Processa cada item\nconst processedItems = items.map(item => {\n  const dataISO = item.json.data;\n\n  // Verifica se o campo \"data\" existe e é uma string válida\n  if (!dataISO || typeof dataISO !== 'string') {\n    return {\n      json: {\n        ...item.json,\n        data_formatada: null,\n        eh_data_de_hoje: false\n      }\n    };\n  }\n\n  // Formata a data e compara com a data de hoje\n  const dataFormatada = dataISO.split('T')[0];\n  const hoje = new Date().toISOString().split('T')[0];\n  const ehHoje = dataFormatada === hoje;\n\n  return {\n    json: {\n      ...item.json,\n      data_formatada: dataFormatada,\n      eh_data_de_hoje: ehHoje\n    }\n  };\n});\n\n// Retorna todos os itens processados\nreturn processedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        -120
      ],
      "id": "9f46630b-4f36-499d-b017-0fd0b5577c50",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evo.leadscdt.com.br/message/sendText/Leads01",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=+553199489744"
            },
            {
              "name": "text",
              "value": "=oi"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        -560
      ],
      "id": "477489bd-23ec-4ba5-864a-4937212d02c2",
      "name": "Scarlet",
      "disabled": true
    },
    {
      "parameters": {
        "resource": "messages-api",
        "operation": "send-list",
        "options_message": {
          "delay": 1200
        },
        "instanceName": "Clientesdabase",
        "remoteJid": "=+{{ $json.id }}",
        "title": "={{ $json.mensagem }}",
        "description": "Clique em especialidades👇",
        "buttonText": "ESPECIALIDADES",
        "footerText": "Perfeito. ",
        "sections": {
          "sectionValues": [
            {
              "title": "Escolha as especialidades.",
              "rows": {
                "rowValues": [
                  {
                    "title": "Dermatologista.🧴 ",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Cardiologista.❤️ ",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Clínico geral.👨‍⚕️",
                    "description": "R$35,00 a consulta."
                  },
                  {
                    "title": "Endocrinologista.🍬",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Ginecologista.👩‍⚕️",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Oftalmologista👁️",
                    "description": "R$40,00 consulta + R$37,00 exame."
                  },
                  {
                    "title": "Ortopedista 🦴",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Pediatra👶",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Psiquiatra🧠",
                    "description": "R$40,00 a consulta. R$70,00 tratamento."
                  },
                  {
                    "title": "Fisioterapeuta🤸",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Fonoaudióloga🗣️",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Nutróloga🥦",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Nutricionista🥗",
                    "description": "R$40,00 a consulta + R$65,00 bioimpedância"
                  },
                  {
                    "title": "Psicóloga💬",
                    "description": "R$40,00 a consulta."
                  },
                  {
                    "title": "Ortodontia😁",
                    "description": "Até 70% descontos em procedimento."
                  },
                  {
                    "title": "No momento não. Obrigado!",
                    "description": "Não estou precisando. "
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        500,
        -120
      ],
      "id": "8dafad3e-10ac-4c53-94cb-3e1f49a1adc3",
      "name": "Evolution API",
      "credentials": {
        "evolutionApi": {
          "id": "Am1a4ak0wFJuKCAx",
          "name": "Evolution account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "operation": "send-buttons",
        "instanceName": "Francisco",
        "remoteJid": "=+5531999489744",
        "title": "Oi, sou representante",
        "description": "Consultas",
        "footer": "R$40",
        "buttons": {
          "buttonValues": [
            {
              "displayText": "Cardiologista",
              "id": "1"
            },
            {
              "displayText": "Oftalmologista",
              "id": "2"
            }
          ]
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        800,
        -500
      ],
      "id": "7a0b4358-39b1-442d-a57d-dc6385bc0176",
      "name": "Evolution API1",
      "credentials": {
        "evolutionApi": {
          "id": "l05vdPmuvIAcFavL",
          "name": "Francisco"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Code19": {
      "main": [
        [
          {
            "node": "Evolution API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch6": {
      "main": [
        [],
        [
          {
            "node": "Code20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code20": {
      "main": [
        []
      ]
    },
    "Code21": {
      "main": [
        []
      ]
    },
    "Loop Over Items6": {
      "main": [
        [],
        [
          {
            "node": "Code19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Primeiro2": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Se é o vendendor": {
      "main": [
        [
          {
            "node": "Respondeu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Se é o vendendor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respondeu": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scarlet": {
      "main": [
        []
      ]
    },
    "Evolution API": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a1654766-bfac-4cc2-9ab4-723e052e1947",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f763e8fdca77702870cf690f15089984a3c3202426ce948f8e26feb070a0b4a8"
  },
  "id": "zYQq8su4GwpOckY7",
  "tags": []
}